Version: 1.0

RestoreWorkspace: Default
SaveWorkspace: Default
AlwaysSaveHistory: Default

EnableCodeIndexing: Yes
UseSpacesForTab: Yes
NumSpacesForTab: 2
Encoding: UTF-8

RnwWeave: Sweave
LaTeX: pdfLaTeX

---
title: "rnaseq_processing"
output:
  pdf_document: default
  html_document: default
date: "2024-11-07"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# **Downloading the data**

```{bash}
#!/bin/sh
#!/bin/sh
echo "Switching directories"
cd /scratch_tmp/grp/msc_appbio/group12/originals

echo "Downloading ERR2660265"
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR266/005/ERR2660265/ERR2660265.fastq.gz
echo "Downloading ERR2660269"
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR266/009/ERR2660269/ERR2660269.fastq.gz
echo "Downloading ERR2660271"
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR266/001/ERR2660271/ERR2660271.fastq.gz
echo "Downloading ERR2660266"
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR266/006/ERR2660266/ERR2660266.fastq.gz
echo "Downloading ERR2660264"
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR266/004/ERR2660264/ERR2660264.fastq.gz
echo "Downloading ERR2660267"
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR266/007/ERR2660267/ERR2660267.fastq.gz
echo "Downloading ERR2660263"
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR266/003/ERR2660263/ERR2660263.fastq.gz
echo "Downloading ERR2660262"
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR266/002/ERR2660262/ERR2660262.fastq.gz

echo "Download Complete"
```
~15 minutes
# **Running FASTQC**
```{bash}
fastqc *.fastq.gz -o /scratch/grp/msc_appbio/group_12/outputs/FastQC
```
~30 minutes 
# **Filtering reads with Phred score < 20**
Easiest way to do it is using bioawk, a version of awk, that can process biological files like fastq here. To access it on the hpc, first install it using conda
```{bash}
 conda install bioconda::bioawk
```
Then run a pipeline, the bioawk command results in a tab-delimited version of the fastq file, so parse it with awk to return to fastq format 
```{bash}
bioawk -c fastx '{if (meanqual($qual) >= 20) print "@"$name"\n"$seq"\n+"$name"\n"$qual}' *.fastq.gz | awk -F'\t' '{ 
    print "@" $1;
    print $2;
    print "+";
    print $3 " " $4;
}' > filtered_WTS_2.fastq
```

```{bash}
#!/bin/bash

echo "Start of Pipeline"

cd /scratch/grp/msc_appbio/group_12/originals

for input_file in *.fastq.gz; do
    # Remove .fastq.gz suffix and append _filtered.fastq.gz
    output_file="${input_file%.fastq.gz}_filtered.fastq.gz"

    # Unzip the input, process, and then zip the output
    gunzip -c "$input_file" | \
    bioawk -c fastx '{if (meanqual($qual) >= 20) print "@"$name"\n"$seq"\n+"$name"\n"$qual}' | \
    awk -F'\t' '{ 
        print "@" $1;
        print $2;
        print "+";
        print $3 " " $4;
    }' | \
    gzip > "$output_file"
done

echo "End of pipeline"
```

This didnt work,
This only worked locally: 

```{python}
import sys 
import os
from Bio import SeqIO

input_path = '/scratch/grp/msc_appbio/group_12/originals' #specify the path to the fastq files
output_path = '/scratach/grp/msc_appbio'

fastq_files = sys.argv[1:] #Get the list of file names passed through as variables in bash


for fastq in fastq_files:
    print("Now filtering file:",fastq)
    fastq = os.path.join(input_path, fastq) #specifying the path to the file
    
    good_reads = (
    rec # the expression that will be yielded
    for rec in SeqIO.parse(fastq,"fastq") #parse through the file
    if min(rec.letter_annotations["phred_quality"]) >= 20 #return only the reads with Q>=20
    )

    SeqIO.write(good_reads)
```

This worked: 
```{bash}
conda install bioconda::fastx_toolkit

```


```{bash}
fastq_quality_filter -q 20 -p 80 -z -i ERR2660263.fastq -o filtered_ERR2660263.fastq
```

```{bash}
#!/bin/bash

# Directory paths
input_dir="/scratch_tmp/grp/msc_appbio/group12/originals"
output_dir="/scratch_tmp/grp/msc_appbio/group12/outputs/fastqFiltered"

for file in "$input_dir"/*.fastq.gz; do

  base_name=$(basename "$file" .fastq.gz)
  
  gunzip -c "$file" | fastq_quality_filter -q 20 -p 80 -z -o "$output_dir/filtered_${base_name}.fastq.gz"

  echo "Processed $file -> $output_dir/filtered_${base_name}.fastq.gz"
done
```


**Cut adapter sequences**
```{bash}
#!/bin/bash

# Directory paths
input_dir="/scratch_tmp/grp/msc_appbio/group12/originals"
output_dir="/scratch_tmp/grp/msc_appbio/group12/outputs/fastqFiltered"

for file in "$input_dir"/*.fastq.gz; do

  base_name=$(basename "$file" .fastq.gz)
  
  gunzip -c "$file" | fastq_quality_filter -q 20 -p 80 -z -o "$output_dir/filtered_${base_name}.fastq.gz"

  echo "Processed $file -> $output_dir/filtered_${base_name}.fastq.gz"
done
  ```


```{bash}
conda install bioconda::cutadapt
```
**Cut adapter sequences**
```{bash}
cutadapt -a CTGTAGGCACCATCAAT --discard-untrimmed -o output_trimmed.fastq filtered_ERR2660263.fastq.gz
```

**Removing reads that align to ncRNA**
```{bash}
bowtie2-build /scratch/grp/msc_appbio/group_12/references/ncRNA.fasta /scratch/grp/msc_appbio/group_12/references/ncRNA
```


```{bash}
bowtie2 --no-unal -p 2 --un /scratch/grp/msc_appbio/group_12/outputs/ncRNA-subtracted/ERR2660263_subtracted.fastq -x /scratch/grp/msc_appbio/group_12/references/ncRNA/ncRNA -U /scratch/grp/msc_appbio/group_12/outputs/trimmed_fastq/ERR2660263_trimmed.fastq -S /scratch/grp/msc_appbio/group_12/outputs/ncRNA-subtracted/subtracted_SAM/ERR2660263.sam
```

--no-unal supresses SAM records for reads 
-p utilises multiple processors
--un write unpaired reads that fail to align to file at <path>
-U input fastq file
-S output sam file

# **Hisat2 alignment**
Build the indices 
```{bash}
hisat2-build -p 16 /scratch/grp/msc_appbio/group_12/references/sequences/Genome.fa  /scratch/grp/msc_appbio/group_12/references/Genome
```

```{bash}
#!/bin/bash

echo "Aligning reads..."

hisat2 -p 4 -k 2 --no-softclip --dta --no-unal -x /scratch/grp/msc_appbio/group_12/references/Genome/Genome -U /scratch/grp/msc_appbio/group_12/outputs/ncRNA-subtracted/ERR2660263_subtracted.fastq -S /scratch/grp/msc_appbio/group_12/outputs/hisat2_alignment/ERR2660263_aligned.sam

echo "Alignment done!"

```

